Worst Case Analysis
---------------------
Task 0: In the code, data is read using indexing directly. For example first element is read using list[index] and last element is accesses using list[-1]. Since these operations does not involve any iteration and the list elements can be accessesed directly, the worst case complexity of the code will be constant i.e O(1). Here 1 represent 1 number of instruction to read data from list at first or last place. 

Task 1: Lets assume there are 'n' number of calls and 'm' number of texts. In the code, there are 2 for loops. First, for the first loop it reads all the texts and in each loop it add fist element of the list and second element of the list to the set. There are altogether, 2 list access and 2 set addition in that. So in worst case it will take 2*2*m instructions. Again another for loop reads all the calls and does similar operation so in worst case it will take 2*2*n instructions.
So total instructions would be 2*2*(m+n). So the worst case time complexity of the code will be O(2*2*(m+n)). We can ignore the 2*2 part and just write the complexity to be O(m+n).


Task 2: Lets assume there are 'n' number of calls. Then at worst case there can be 'n' elements added in the phone_call_dict from the first for loop. Again, in second for loop it can append n dictionaries of counts to empty list phone_call_list. Now we need to sort the list. Sorting using python function taken O(nlog(n)) time where n is the lenth of list phone_call_list. So the overall time complexity of the code is: O(n*log(n)) for sorting + O(7n) for instructions inside for loop which is 7n = 6n (for addition, dictionary.get and assignment) + n in another loop to append value.

Task 3 Part A: For this task, we need to loop across calls list and find the codes that match certain condition. As such, if the calls list has n number of elements then the for loop will run n times. At worst case, all 3 if statements would get satisfied and then the code inside gets executed. The while loop inside if statement in first for loop at worst case can run 11 times which is the number of telephone. For all other if statements there is only adding and checking few conditions. We can assume them to be altogether 10 instructions. So a total of 10+10=20n instructions would be generated and time complexity resulting from the first for loop would be 20n. For sorting for n number of elements it would take O(nlog(n)) time complexity in worst case. So overall complexity would be O(nlog(n)) + O(n). Taking maximum complexity this would be O(nlogn).

Task 3 Part B: There is one for loop and if statements inside the for loop. If we assume the length of list to be 'n'. Then there would be 3n number of instructions generated inside the for loop. So worst case time complexity of the whole code would be O(2+3n) which we can assume to be O(n).

Task 4: O(3n) There are 2 for loops, 1 set difference and 1 sorting. For simplicity, lets assume the length of 2 lists calls and texts are same i.e 'n'. Then in from first loop, we can see that maximum of 4n instructions can be generated and same with the second loop, leading a total of 8n i.e O(n) complexity. The maximum size of set other_phone_set is 6n and the telemarketer set is n. Hence the set difference can have maximum of O(6n) i.e O(n) complexity. Next, we have sorting of the list of telemarketers. List sorting is of complexity O(n). Hence the overall complexity of the code is O(nlog(n)) for sorting + O(n) for rest. Taking maximum complexity, it would be O(nlogn). 